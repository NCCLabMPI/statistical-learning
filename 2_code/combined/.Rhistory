within.WI.samp <- replicate(200, sample(within.WI, size = n.wi, replace = TRUE))
within.WI.means <- replicate(200, mean(sample(within.WI, size = n.wi, replace = TRUE), na.rm = TRUE))
across.WI.samp <- replicate(200, sample(across.WI, size = n.wi, replace = TRUE))
across.WI.means <- replicate(200, mean(sample(across.WI, size = n.wi, replace = TRUE), na.rm = TRUE))
(wt.WI <- wilcox.test(within.WI.samp,across.WI.samp, conf.int = TRUE, conf.level = 0.95, paired = FALSE))
wn.di <- list(c(1,2),c(2,3),
c(4,5),c(5,6),
c(7,8),c(7,9),
c(10,11),c(11,12))
ac.di <- list(c(1,3),c(4,6),c(8,9),c(10,12))
wn.di.arr <- list()
for (i in 1:length(wn.di)) {
# group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
wn.di.arr <- append(wn.di.arr, mapply(function(x, y) x[y][2], group.analysis, wn.di[i], SIMPLIFY = FALSE))
}
ac.di.arr <- list()
for (i in 1:length(ac.di)) {
# group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
ac.di.arr <- append(ac.di.arr, mapply(function(x, y) x[y][2], group.analysis, ac.di[i], SIMPLIFY = FALSE))
}
within.di <- cbind(wn.di.arr[!is.na(wn.di.arr)]) %>% as.numeric()
within.di[mapply(is.infinite, within.di)] <- NA
across.di <- cbind(ac.di.arr[!is.na(ac.di.arr)]) %>% as.numeric()
across.di[mapply(is.infinite, across.di)] <- NA
(n.di <- round(min(length(within.di),length(across.di))*(4/5)))
within.di.samp <- replicate(200, sample(within.di, size = n.di, replace = TRUE))
within.di.means <- replicate(200, mean(sample(within.di, size = n.di, replace = TRUE), na.rm = TRUE))
across.di.samp <- replicate(200, sample(across.di, size = n.di, replace = TRUE))
across.di.means <- replicate(200, mean(sample(across.di, size = n.di, replace = TRUE), na.rm = TRUE))
(wt.DI <- wilcox.test(within.di.samp,across.di.samp, conf.int = TRUE, conf.level = 0.95, paired = FALSE))
WA.wilcox <- data.frame(test = factor(c(
"ordinal position",
#"ordinal position",
"transitional probability",
#"transitional probability",
"word identity",
#"word identity",
#"duplets",
"duplets"), levels = c("ordinal position","transitional probability","word identity","duplets")),
#group = as.factor(c("within","across","within","across","within","across","within","across")),
mean = as.numeric(c(mean(within.OP.means)-mean(across.OP.means),
mean(within.TP.means)-mean(across.TP.means),
mean(within.WI.means)-mean(across.WI.means),
mean(within.di.means)-mean(across.di.means))),
w = as.numeric(c(
wt.OP$statistic,
#wt.OP$statistic,
wt.TP$statistic,
#wt.TP$statistic,
wt.WI$statistic,
#wt.WI$statistic,
#wt.DI$statistic,
wt.DI$statistic)),
"CI low" = as.numeric(c(
wt.OP$conf.int[1],
#wt.OP$conf.int,
wt.TP$conf.int[1],
#wt.TP$conf.int,
wt.WI$conf.int[1],
#wt.WI$conf.int,
#wt.DI$conf.int,
wt.DI$conf.int[1])),
"CI hi" = as.numeric(c(
wt.OP$conf.int[2],
wt.TP$conf.int[2],
wt.WI$conf.int[2],
wt.DI$conf.int[2])),
p = as.numeric(c(
wt.OP$p.value,
#wt.OP$p.value,
wt.TP$p.value,
#wt.TP$p.value,
wt.WI$p.value,
#wt.WI$p.value,
#wt.DI$p.value,
wt.DI$p.value)))
write.csv(WA.wilcox,file.path(res_path,'/wilcox_zcorr_run6.csv'), row.names = FALSE)
if (WA.wilcox$p < 0.001) {
xs = c(1:4)[WA.wilcox$p < 0.0001]
ys = WA.wilcox$mean[WA.wilcox$p < 0.0001]
labels = "***"
} else if (WA.wilcox$p < 0.01) {
xs = c(1:4)[WA.wilcox$p < 0.01]
ys = WA.wilcox$mean[WA.wilcox$p < 0.01]
labels = "**"
} else if (WA.wilcox$p < 0.05) {
xs = c(1:4)[WA.wilcox$p < 0.05]
ys = WA.wilcox$mean[WA.wilcox$p < 0.05]
labels = "**"
}
ggplot(WA.wilcox) +
geom_col(aes(test,mean), fill = "grey", color = "black") +
geom_hline(yintercept = 0, color = "black", linetype="dashed") +
scale_x_discrete(name = NULL) +
scale_y_continuous(name = "within - across similarity z(Pearson's r)") +
# annotate(geom = "text", x = 1, y = -0.015, size = 4, label = "***") +
# annotate(geom = "text", x = 2, y = 0.0135, size = 4, label = "***") +
# annotate(geom = "text", x = 4, y = -0.064, size = 4, label = "***") +
theme_classic() +
theme(text = element_text(family = "LM Roman 10", face="bold")) +
ggsave(file.path(fig_path,'/fig9_similarity_z_run6.png'), width = 7, height = 5)
library(rcompanion)
install.packages
install.packages("rcompanion")
library(rcompanion)
# indices for each matrix
wn.OP <- list(c(1,4),c(1,7),c(1,10),c(4,7),c(4,10),c(7,10), # 1s
c(2,5),c(2,8),c(2,11),c(5,8),c(5,11),c(8,11), #2s
c(3,6),c(3,9),c(3,12),c(6,9),c(6,12),c(9,12)) #3s
ac.OP <- list(c(1,2),c(2,3),c(1,3),
c(4,5),c(5,6),c(4,6),
c(7,8),c(7,9),c(8,9),
c(10,11),c(11,12),c(10,12))
# collect all possible values
wn.arr <- list()
for (i in 1:length(wn.OP)) {
wn.arr <- append(wn.arr, mapply(function(x, y) x[y][2], group.analysis, wn.OP[i], SIMPLIFY = FALSE))
}
ac.arr <- list()
for (i in 1:length(ac.OP)) {
# group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
ac.arr <- append(ac.arr, mapply(function(x, y) x[y][2], group.analysis, ac.OP[i], SIMPLIFY = FALSE))
}
within.OP <- cbind(wn.arr[!is.na(wn.arr)]) %>% as.numeric()
within.OP[mapply(is.infinite, within.OP)] <- NA
across.OP <- cbind(ac.arr[!is.na(ac.arr)]) %>% as.numeric()
across.OP[mapply(is.infinite, across.OP)] <- NA
# compute maximum length
(n.op <- round(min(length(within.OP),length(across.OP))*(4/5)))
# sample & bootstrap to produce a matrix and bootstrapped means
within.OP.samp <- replicate(200, sample(within.OP, size = n.op, replace = TRUE))
within.OP.means <- replicate(200, mean(sample(within.OP, size = n.op, replace = TRUE), na.rm = TRUE))
across.OP.samp <- replicate(200, sample(across.OP, size = n.op, replace = TRUE))
across.OP.means <- replicate(200, mean(sample(across.OP, size = n.op, replace = TRUE), na.rm = TRUE))
(wt.OP <- wilcox.test(within.OP.samp,across.OP.samp, conf.int = TRUE, conf.level = 0.95, paired = TRUE))
(wt.OP <- wilcox.test(within.OP.samp,across.OP.samp, conf.int = TRUE, conf.level = 0.95, paired = TRUE))
within.OP.samp
(wt.OP <- wilcox.test(within.OP.samp,across.OP.samp, conf.int = TRUE, conf.level = 0.95, paired = TRUE))
within.OP.samp
as.numeric(within.OP.samp)
within.OP.samp <- as.numeric(replicate(200, sample(within.OP, size = n.op, replace = TRUE)))
within.OP.means <- replicate(200, mean(sample(within.OP, size = n.op, replace = TRUE), na.rm = TRUE))
across.OP.samp <- as.numeric(replicate(200, sample(across.OP, size = n.op, replace = TRUE)))
across.OP.means <- replicate(200, mean(sample(across.OP, size = n.op, replace = TRUE), na.rm = TRUE))
(wt.OP <- wilcox.test(within.OP.samp,across.OP.samp, conf.int = TRUE, conf.level = 0.95, paired = TRUE))
wilcoxonPairedR(wt.OP)
wt.OP
within.OP.samp
wilcoxonPairedR(within.OP.samp,across.OP.samp, histogram = TRUE, conf = 0.95, type = "perc", R = 1000, cases = TRUE, digits = 3)
within.OP.samp
across.OP.samp
wilcoxonPairedR(x=within.OP.samp,g=across.OP.samp, histogram = TRUE, conf = 0.95, type = "perc", R = 1000, cases = TRUE, digits = 3)
wilcoxonPairedR(x=within.OP.samp,g=across.OP.samp)
across.OP.samp <- as.numeric(replicate(200, sample(across.OP, size = n.op, replace = TRUE)))
within.OP.samp <- as.numeric(replicate(200, sample(within.OP, size = n.op, replace = TRUE)))
wilcoxonPairedR(x=within.OP.samp, g=across.OP.samp)
size(across.OP.samp)
dim(across.OP.samp)
length(across.OP.samp)
dim(across.OP.samp)[1]
length(within.OP.samp)
n.op
within.OP.samp
n.op
within.OP.samp
rcompanion::wilcoxonPairedR(x=within.OP.samp, g=across.OP.samp)
!is.na(within.OP.samp)
length(!is.na(within.OP.samp))
isTRUE(!is.na(within.OP.samp))
count(!is.na(within.OP.samp))
within.OP.samp[!is.na(within.OP.samp)]
length(within.OP.samp[!is.na(within.OP.samp)])
length(across.OP.samp[!is.na(across.OP.samp)])
within.OP
within.OP.means
within.OP
within.OP[!is.na(within.OP)]
length(within.OP.samp[!is.na(within.OP.samp)])
length(within.OP[is.na(within.OP)])
length(within.OP[!is.na(within.OP)])
length(within.OP)
18/879
length(across.OP)
loss <- length(within.OP[is.na(within.OP)])/length(within.OP)
loss
? stop
loss <- length(within.OP[is.na(within.OP)])/length(within.OP)
print(paste0('Within OP has ',length(within.OP[is.na(within.OP)]),'NA out of ',length(within.OP),'. ',loss, '% loss.'))
length(within.OP[is.na(within.OP)])
print(paste0('Within OP has ',length(within.OP[is.na(within.OP)]),' NAs out of ',length(within.OP),'. ',loss, '% loss.'))
print(paste0('Within OP has ',length(within.OP[is.na(within.OP)]),' NAs out of ',length(within.OP),'. ',digits(loss,3), '% loss.'))
print(paste0('Within OP has ',length(within.OP[is.na(within.OP)]),' NAs out of ',length(within.OP),'. ',round(loss,digits=3), '% loss.'))
within.OP <- within.OP[!is.na(within.OP)]
length(within.OP[is.na(within.OP)])
length(across.OP[is.na(across.OP)])
length(across.OP)
loss <- length(across.OP[is.na(across.OP)])/length(across.OP)
(loss > 0.1)
across.OP <- across.OP[!is.na(across.OP)] # remove NA
(n.op <- round(min(length(within.OP),length(across.OP))*(4/5)))
within.OP.samp <- as.numeric(replicate(200, sample(within.OP, size = n.op, replace = TRUE)))
within.OP.means <- replicate(200, mean(sample(within.OP, size = n.op, replace = TRUE), na.rm = TRUE))
across.OP.samp <- as.numeric(replicate(200, sample(across.OP, size = n.op, replace = TRUE)))
across.OP.means <- replicate(200, mean(sample(across.OP, size = n.op, replace = TRUE), na.rm = TRUE))
n.op
(wt.OP <- wilcox.test(within.OP.samp,across.OP.samp, conf.int = TRUE, conf.level = 0.95, paired = TRUE))
rcompanion::wilcoxonPairedR(x=within.OP.samp, g=across.OP.samp, histogram = TRUE, conf = 0.95, type = "perc", R = 1000, cases = TRUE, digits = 3)
length(within.OP.samp)
across.OP
# collect values for each of these boxes from all participants (all matrices in the list)
# You can check what's happening here like so: group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
wn.arr <- list()
for (i in 1:length(wn.OP)) {wn.arr <- append(wn.arr, mapply(function(x, y) x[y][2], group.analysis, wn.OP[i], SIMPLIFY = FALSE))}
ac.arr <- list()
for (i in 1:length(ac.OP)) {ac.arr <- append(ac.arr, mapply(function(x, y) x[y][2], group.analysis, ac.OP[i], SIMPLIFY = FALSE))}
within.OP <- cbind(wn.arr[!is.na(wn.arr)]) %>% as.numeric()
within.OP[mapply(is.infinite, within.OP)] <- NA # clean, in case using z-transform
#print(paste0('Within OP has ',length(within.OP[is.na(within.OP)]),' NAs out of ',length(within.OP),'. ',round(loss,digits=3), '% loss.'))
loss <- length(within.OP[is.na(within.OP)])/length(within.OP)
if (loss > 0.1) {stop()}
within.OP <- within.OP[!is.na(within.OP)] # remove NA
across.OP <- cbind(ac.arr[!is.na(ac.arr)]) %>% as.numeric()
across.OP[mapply(is.infinite, across.OP)] <- NA
loss <- length(across.OP[is.na(across.OP)])/length(across.OP)
if (loss > 0.1) {stop()}
across.OP <- across.OP[!is.na(across.OP)] # remove NA
# compute maximum length
(n.op <- round(min(length(within.OP),length(across.OP))*(4/5)))
# sample & bootstrap to produce a matrix and bootstrapped means
within.OP.samp <- as.numeric(replicate(200, sample(within.OP, size = n.op, replace = TRUE)))
within.OP.means <- replicate(200, mean(sample(within.OP, size = n.op, replace = TRUE), na.rm = TRUE))
length(within.OP.samp)
length(within.OP.samp[is.na(within.OP.samp)])
length(across.OP.samp[is.na(across.OP.samp)])
length(across.OP.samp)
across.OP.samp
rcompanion::wilcoxonPairedR(x=within.OP.samp, g=across.OP.samp)
rcompanion::wilcoxonPairedR(x=within.OP.samp, y=across.OP.samp)
within.OP.samp
across.OP.means
across.OP.samp
rcompanion::wilcoxonPairedR(x=within.OP.samp, y=across.OP.samp)
as.numeric(across.OP.samp) == 2
within.OP.samp[as.numeric(across.OP.samp) == 2]
summary(within.OP.samp)
summary(across.OP.samp)
rcompanion::wilcoxonPairedRC(x=within.OP.samp, y=across.OP.samp)
across.OP.samp[is.nan(across.OP.samp)]
within.OP.samp[is.nan(within.OP.samp)]
within.OP.samp[is.nan(within.OP.samp)]
within.OP.samp[is.na(within.OP.samp)]
across.OP.samp[is.na(across.OP.samp)]
across.OP.samp[is.infinite(across.OP.samp)]
within.OP.samp[is.infinite(within.OP.samp)]
within.OP.samp[!is.numeric(within.OP.samp)]
wilcoxonPairedRC(x=within.OP.samp, y=across.OP.samp)
wilcoxonPairedR(x=within.OP.samp, y=across.OP.samp)
length(within.OP.samp)
length(across.OP.samp)
rcompanion::wilcoxonPairedR(within.OP.samp, across.OP.samp)
gghistogram(within.OP.samp, x = "weight", y = "..density..",
fill = "steelblue",bins = 4, add_density = TRUE)
gghistogram(within.OP.samp,
fill = "steelblue",bins = 4, add_density = TRUE)
hist(within.OP.samp)
hist(within.OP.samp, density = true)
library(rstatix)
install.packages("rstatix")
install.packages("rstatix")
library(rstatix)
install.packages("rstatix")
install.packages("rstatix")
library(rstatix)
? wilcox_test
? wilcox.test
wt.OP
? coin::wilcoxsign_test
coin::wilcoxsign_test(within.OP.samp ~ across.OP.samp, distribution = "exact")
meta_table <- as.data.frame(data = as.factor(0),
test = as.factor(0),
w = as.double(0),
CI.low = as.double(0),
CI.hi = as.double(0),
p = as.double(0))
meta_table <- data.frame(data = as.factor(0),
test = as.factor(0),
w = as.double(0),
CI.low = as.double(0),
CI.hi = as.double(0),
p = as.double(0))
meta_table
meta_table
name <- 'corr.z'
wt.OP$data.name
wt.OP$parameter
meta_table
wt.OP$conf.int
wt.OP$conf.int[1]
data.frame(name,
'ordinal position',
wt.OP$statistic,
wt.OP$conf.int[1],
wt.OP$conf.int[2],
wt.OP$p.value)
rbind(meta_table, data.frame(name,
'ordinal position',
wt.OP$statistic,
wt.OP$conf.int[1],
wt.OP$conf.int[2],
wt.OP$p.value))
? data.frame()
tibble(data = as.factor(0),
test = as.factor(0),
w = as.double(0),
CI.low = as.double(0),
CI.hi = as.double(0),
p = as.double(0))
data.frame(name,
'ordinal position',
wt.OP$statistic,
wt.OP$conf.int[1],
wt.OP$conf.int[2],
wt.OP$p.value)
data.frame(name,
'ordinal position',
wt.OP$statistic,
wt.OP$conf.int[1],
wt.OP$conf.int[2],
wt.OP$p.value) %>%
names(.colnames(meta_table))
data.frame(name,
'ordinal position',
wt.OP$statistic,
wt.OP$conf.int[1],
wt.OP$conf.int[2],
wt.OP$p.value)
meta_table
meta_table <- rbind(meta_table,
data.frame(data = name,
test = 'ordinal position',
w = wt.OP$statistic,
CI.low = wt.OP$conf.int[1],
CI.hi = wt.OP$conf.int[2],
p = wt.OP$p.value))
meta_table
label
group.analysis <- all.cor.list
name <- 'corr'
label <- 'similarity ('
paste0("within - across similarity ", label ,"Pearson's r)")
paste0("within - across ", label ,"Pearson's r)")
i = 1
paste0('/fig9_',name,'_',i,'.png')
paste0('/wilcox_',name,'_run',i,'.csv')
meta_table <- data.frame(data = as.factor(0),
test = as.factor(0),
w = as.double(0),
CI.low = as.double(0),
CI.hi = as.double(0),
p = as.double(0))
# Group level analysis on this matrix:
i = 1
# Dissimilarity Matrix
# group.analysis <- all.cor.diss.list
# name <- 'diss'
# label <- 'dissimilarity (1-'
# group.analysis <- all.cor.diss.z.list
# name <- 'diss_z'
# label <- 'dissimilarity z(1-'
# Similarity Matrix
group.analysis <- all.cor.list
name <- 'corr'
label <- 'similarity ('
# group.analysis <- all.cor.z.list
# name <- 'corr_z'
# label <- 'similarity z('
set.seed(42)
# indices for each matrix
wn.OP <- list(c(1,4),c(1,7),c(1,10),c(4,7),c(4,10),c(7,10), # 1s
c(2,5),c(2,8),c(2,11),c(5,8),c(5,11),c(8,11), #2s
c(3,6),c(3,9),c(3,12),c(6,9),c(6,12),c(9,12)) #3s
ac.OP <- list(c(1,2),c(2,3),c(1,3),
c(4,5),c(5,6),c(4,6),
c(7,8),c(7,9),c(8,9),
c(10,11),c(11,12),c(10,12))
# collect values for each of these boxes from all participants (all matrices in the list)
# You can check what's happening here like so: group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
wn.arr <- list()
for (i in 1:length(wn.OP)) {wn.arr <- append(wn.arr, mapply(function(x, y) x[y][2], group.analysis, wn.OP[i], SIMPLIFY = FALSE))}
ac.arr <- list()
for (i in 1:length(ac.OP)) {ac.arr <- append(ac.arr, mapply(function(x, y) x[y][2], group.analysis, ac.OP[i], SIMPLIFY = FALSE))}
within.OP <- cbind(wn.arr[!is.na(wn.arr)]) %>% as.numeric()
meta_table <- data.frame(data = as.factor(0),
test = as.factor(0),
w = as.double(0),
CI.low = as.double(0),
CI.hi = as.double(0),
p = as.double(0))
i = 1
# Group level analysis on this matrix:
# Dissimilarity Matrix
# group.analysis <- all.cor.diss.list
# name <- 'diss'
# label <- 'dissimilarity (1-'
# group.analysis <- all.cor.diss.z.list
# name <- 'diss_z'
# label <- 'dissimilarity z(1-'
# Similarity Matrix
group.analysis <- all.cor.list
name <- 'corr'
label <- 'similarity ('
# group.analysis <- all.cor.z.list
# name <- 'corr_z'
# label <- 'similarity z('
set.seed(42)
# indices for each matrix
wn.OP <- list(c(1,4),c(1,7),c(1,10),c(4,7),c(4,10),c(7,10), # 1s
c(2,5),c(2,8),c(2,11),c(5,8),c(5,11),c(8,11), #2s
c(3,6),c(3,9),c(3,12),c(6,9),c(6,12),c(9,12)) #3s
ac.OP <- list(c(1,2),c(2,3),c(1,3),
c(4,5),c(5,6),c(4,6),
c(7,8),c(7,9),c(8,9),
c(10,11),c(11,12),c(10,12))
# collect values for each of these boxes from all participants (all matrices in the list)
# You can check what's happening here like so: group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
wn.arr <- list()
for (i in 1:length(wn.OP)) {wn.arr <- append(wn.arr, mapply(function(x, y) x[y][2], group.analysis, wn.OP[i], SIMPLIFY = FALSE))}
ac.arr <- list()
for (i in 1:length(ac.OP)) {ac.arr <- append(ac.arr, mapply(function(x, y) x[y][2], group.analysis, ac.OP[i], SIMPLIFY = FALSE))}
within.OP <- cbind(wn.arr[!is.na(wn.arr)]) %>% as.numeric()
# Group level analysis on this matrix:
# Dissimilarity Matrix
# group.analysis <- all.cor.diss.list
# name <- 'diss'
# label <- 'dissimilarity (1-'
# group.analysis <- all.cor.diss.z.list
# name <- 'diss_z'
# label <- 'dissimilarity z(1-'
# Similarity Matrix
group.analysis <- all.cor.list
name <- 'corr'
label <- 'similarity ('
# group.analysis <- all.cor.z.list
# name <- 'corr_z'
# label <- 'similarity z('
set.seed(42)
# indices for each matrix
wn.OP <- list(c(1,4),c(1,7),c(1,10),c(4,7),c(4,10),c(7,10), # 1s
c(2,5),c(2,8),c(2,11),c(5,8),c(5,11),c(8,11), #2s
c(3,6),c(3,9),c(3,12),c(6,9),c(6,12),c(9,12)) #3s
ac.OP <- list(c(1,2),c(2,3),c(1,3),
c(4,5),c(5,6),c(4,6),
c(7,8),c(7,9),c(8,9),
c(10,11),c(11,12),c(10,12))
# collect values for each of these boxes from all participants (all matrices in the list)
# You can check what's happening here like so: group.analysis[[1]][wn.OP[[i]][1],wn.OP[[i]][2]]
wn.arr <- list()
for (i in 1:length(wn.OP)) {wn.arr <- append(wn.arr, mapply(function(x, y) x[y][2], group.analysis, wn.OP[i], SIMPLIFY = FALSE))}
ac.arr <- list()
for (i in 1:length(ac.OP)) {ac.arr <- append(ac.arr, mapply(function(x, y) x[y][2], group.analysis, ac.OP[i], SIMPLIFY = FALSE))}
within.OP <- cbind(wn.arr[!is.na(wn.arr)]) %>% as.numeric()
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(dplyr)
library(extrafont)
par(family="LM Roman 10")
library(lme4)
library(emmeans)
library(car)
library(dplyr)
library(extrafont)
par(family="LM Roman 10")
library(lme4)
library(emmeans)
library(car)
library(dplyr)
library(extrafont)
par(family="LM Roman 10")
library(lme4)
library(emmeans)
library(car)
library(dplyr)
library(extrafont)
par(family="LM Roman 10")
library(DescTools)
library(rcompanion)
#data_path
#code_path
#res_path
fig_path <- 'C:/Users/Ava/Desktop/Experiments/statistical_learning/3_results/combined'
res_path <- 'C:/Users/Ava/Desktop/Experiments/statistical_learning/3_results/combined'
#source("summarySE.R")
exps.3.4.data <- read_csv('C:/Users/Ava/Desktop/Experiments/statistical_learning/1_data/combined/exps_3_4s_data.csv') %>% mutate(subject = as.factor(subject),
target = as.factor(target),
sess = as.factor(sess),
tgt_pos = as.factor(tgt_pos),
tgt_word = as.factor(tgt_word),
cond_order = as.factor(cond_order),
exp = as.factor(exp))
library(tidyverse)
update.packages()
install.packages("tidyverse")
colourpicker:::colourPickerAddin()
update.packages(ask = FALSE)
library(tidyverse)
R.version
installr: install.packages("installr")
install.packages("installr")
library(installr)
updateR()
